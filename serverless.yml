# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: groupProject4413
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: java11
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "dynamodb:*"
     Resource: "*"
  timeout: 30


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
  listProducts:
    handler: com.serverless.ListProductsHandler
    events:
      - http:
          path: /products
          method: get
  getProduct:
    handler: com.serverless.GetProductHandler
    events:
      - http:
          path: /products/{id}
          method: get
  createProduct:
    handler: com.serverless.CreateProductHandler
    events:
      - http:
          path: /products
          method: post
  deleteProduct:
    handler: com.serverless.DeleteProductHandler
    events:
      - http:
          path: /products/{id}
          method: delete

  getItem:
    handler: ca.yorku.item.GetItemHandler
    events:
      - http:
          path: /item/{itemId}
          method: get

  updateItem:
    handler: ca.yorku.item.UpdateItemHandler
    events:
      - http:
          path: /item/{itemId}
          method: patch

  deleteItem:
    handler: ca.yorku.item.DeleteItemHandler
    events:
      - http:
          path: /item/{itemId}
          method: delete
  addItem:
    handler: ca.yorku.item.AddItemHandler
    events:
      - http:
          path: /item/new
          method: post


  getOrder:
    handler: ca.yorku.order.GetOrderHandler
    events:
      - http:
          path: /order/{orderId}
          method: get

  updateOrder:
    handler: ca.yorku.order.UpdateOrderHandler
    events:
      - http:
          path: /order/{orderId}
          method: patch
  deleteOrder:
    handler: ca.yorku.order.DeleteOrderHandler
    events:
      - http:
          path: /order/{orderId}
          method: delete
  addOrder:
    handler: ca.yorku.order.AddOrderHandler
    events:
      - http:
          path: /order/new
          method: post

  getReview:
    handler: ca.yorku.review.GetReviewHandler
    events:
      - http:
          path: /review/{reviewId}
          method: get

  updateReview:
    handler: ca.yorku.review.UpdateReviewHandler
    events:
      - http:
          path: /review/{reviewId}
          method: patch
  deleteReview:
    handler: ca.yorku.review.DeleteReviewHandler
    events:
      - http:
          path: /review/{reviewId}
          method: delete
  addReview:
    handler: ca.yorku.review.AddReviewHandler
    events:
      - http:
          path: /review/new
          method: post


  addCategory:
    handler: ca.yorku.category.AddCategoryHandler
    events:
      - http:
          path: /category/new
          method: post

  searchItemsByCategory:
    handler: ca.yorku.search.SearchItemsByCategory
    events:
      - http:
          path: /category/{categoryId}/items
          method: get
  searchOrdersByItem:
    handler: ca.yorku.search.SearchOrdersByItem
    events:
      - http:
          path: /item/{itemId}/orders
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
resources:
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    itemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: item_table5
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    categoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: categories_table2
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: orders_table2
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ItemsIndex
            KeySchema:
              - AttributeName: itemId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    reviewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: reviews_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
