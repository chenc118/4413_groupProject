# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: groupProject4413
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: java11
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "dynamodb:*"
     Resource: "*"
  timeout: 30


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
  getItem:
    handler: ca.yorku.item.GetItemHandler
    events:
      - http:
          path: /item/{itemId}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  updateItem:
    handler: ca.yorku.item.UpdateItemHandler
    events:
      - http:
          path: /item/{itemId}
          method: patch
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  deleteItem:
    handler: ca.yorku.item.DeleteItemHandler
    events:
      - http:
          path: /item/{itemId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  addItem:
    handler: ca.yorku.item.AddItemHandler
    events:
      - http:
          path: /item/new
          method: post
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false


  getOrder:
    handler: ca.yorku.order.GetOrderHandler
    events:
      - http:
          path: /order/{orderId}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  updateOrder:
    handler: ca.yorku.order.UpdateOrderHandler
    events:
      - http:
          path: /order/{orderId}
          method: patch
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  deleteOrder:
    handler: ca.yorku.order.DeleteOrderHandler
    events:
      - http:
          path: /order/{orderId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  addOrder:
    handler: ca.yorku.order.AddOrderHandler
    events:
      - http:
          path: /order/new
          method: post
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  getReview:
    handler: ca.yorku.review.GetReviewHandler
    events:
      - http:
          path: /review/{reviewId}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  updateReview:
    handler: ca.yorku.review.UpdateReviewHandler
    events:
      - http:
          path: /review/{reviewId}
          method: patch
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  deleteReview:
    handler: ca.yorku.review.DeleteReviewHandler
    events:
      - http:
          path: /review/{reviewId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  addReview:
    handler: ca.yorku.review.AddReviewHandler
    events:
      - http:
          path: /review/new
          method: post
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

#  getUser:
#    handler: ca.yorku.user.GetUserHandler
#    events:
#      - http:
#          path: /user/{userId}
#          method: get
#
#  updateUser:
#    handler: ca.yorku.user.UpdateUserHandler
#    events:
#      - http:
#          path: /user/{userId}
#          method: patch
#
  deleteUser:
    handler: ca.yorku.user.DeleteUserHandler
    events:
      - http:
          path: /user/{userId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  addUser:
    handler: ca.yorku.user.AddUserHandler
    events:
      - http:
          path: /user/new
          method: post
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

#  loginUser:
#    handler: ca.yorku.user.LoginUserHandler
#    events:
#      - http:
#          path: /user/login
#          method: post
#
#  logoutUser:
#    handler: ca.yorku.user.LogoutUserHandler
#    events:
#      - http:
#          path: /user/logout
#          method: post


  addCategory:
    handler: ca.yorku.category.AddCategoryHandler
    events:
      - http:
          path: /category/new
          method: post
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  deleteCategory:
    handler: ca.yorku.category.DeleteCategoryHandler
    events:
      - http:
          path: /category/{categoryId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  updateCategory:
    handler: ca.yorku.category.UpdateCategoryHandler
    events:
      - http:
          path: /category/{categoryId}
          method: patch
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  getCategory:
    handler: ca.yorku.category.GetCategoryHandler
    events:
      - http:
          path: /category/{categoryId}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  getAllCategories:
    handler: ca.yorku.category.GetAllCategoriesHandler
    events:
      - http:
          path: /categories
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  searchItemsByCategory:
    handler: ca.yorku.search.SearchItemsByCategory
    events:
      - http:
          path: /category/{categoryId}/items
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  searchOrdersByItem:
    handler: ca.yorku.search.SearchOrdersByItem
    events:
      - http:
          path: /item/{itemId}/orders
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  searchItemByName:
    handler: ca.yorku.search.SearchItemsByName
    events:
      - http:
          path: /item/name/{itemName}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  getMonthlyReport:
    handler: ca.yorku.analytics.MonthlyReportHandler
    events:
      - http:
          path: /analytics/report/{year-month}
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

  getTop10Report:
    handler: ca.yorku.analytics.GetTop10Report
    events:
      - http:
          path: /analytics/report/top10
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false
  getUserAnalytics:
    handler: ca.yorku.analytics.GetUserAnalytics
    events:
      - http:
          path: /analytics/report/users
          method: get
          cors:
            origin: '*'
            headers:
              - Authorization
              - Content-Type
              - Identification
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Api-Key
            allowCredentials: false

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
resources:
  Resources:
    itemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: item_table8
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    categoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: categories_table3
        AttributeDefinitions:
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: categoryId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: orders_table6
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: placedDate
            AttributeType: S
          - AttributeName: partitionKeyDummy
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ItemsIndex
            KeySchema:
              - AttributeName: itemId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: partitionKeyDummy
                KeyType: HASH
              - AttributeName: placedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    reviewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: reviews_table2
        AttributeDefinitions:
          - AttributeName: reviewId
            AttributeType: S
        KeySchema:
          - AttributeName: reviewId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_table
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#    sessionTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: session_table
#        AttributeDefinitions:
#          - AttributeName: sessionId
#            AttributeType: S
#        KeySchema:
#          - AttributeName: sessionId
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
