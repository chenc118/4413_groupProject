package ca.yorku.dal;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverless.dal.DynamoDBAdapter;
import lombok.Data;

import java.util.HashMap;

@Data
@DynamoDBTable(tableName = "categories_table2")
public class Category {

    private static DynamoDBAdapter db_adapter;
    private final DynamoDBMapper mapper;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    private String id;
    @DynamoDBAttribute
    private String name;


    public Category(){
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }
    
    public Category get(String id){
        Category category = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Category> queryExp = new DynamoDBQueryExpression<Category>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Category> result = this.mapper.query(Category.class, queryExp);
        if (result.size() > 0) {
            category = result.get(0);
            //logger.info("Products - get(): product - " + product.toString());
        } else {
            //logger.info("Products - get(): product - Not Found.");
        }
        return category;
    }
    
    public void save(){
        mapper.save(this);
    }
    
    public boolean delete(String id){
        Category category;
        category = get(id);
        if(category != null){
            mapper.delete(category);
            return true;
        }
        return false;
    }
}
