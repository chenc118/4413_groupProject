package ca.yorku.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverless.dal.DynamoDBAdapter;
import lombok.Getter;
import lombok.Setter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

@DynamoDBTable(tableName = "reviews_table2")
public class Review {

    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    private final Logger logger;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    @Getter
    @Setter
    private String reviewId;
    @DynamoDBAttribute
    @Getter
    @Setter
    private String itemId;
    @DynamoDBAttribute
    @Getter
    @Setter
    private String orderId;
    @DynamoDBAttribute
    @Getter
    @Setter
    private int rating;
    @DynamoDBAttribute
    @Getter
    @Setter
    private String title;
    @DynamoDBAttribute
    @Getter
    @Setter
    private String content;

    public Review() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder().build();
        DynamoDBAdapter db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getDbClient();
        this.mapper = db_adapter.createDbMapper(mapperConfig);

        logger = Logger.getLogger(this.getClass().getName());
    }

    public Review get(String reviewId) {
        Review review = null;

        Map<String, AttributeValue> av = new HashMap<>();
        av.put(":v1", new AttributeValue().withS(reviewId));

        DynamoDBQueryExpression<Review> queryExp = new DynamoDBQueryExpression<Review>()
                .withKeyConditionExpression("reviewId = :v1")
                .withExpressionAttributeValues(av);

        List<Review> result = this.mapper.query(Review.class, queryExp);
        if (result.size() > 0) {
            review = result.get(0);
            //logger.info("Products - get(): product - " + product.toString());
        } else {
            //logger.info("Products - get(): product - Not Found.");
        }
        return review;
    }

    public void save() {
        mapper.save(this);
    }

    public boolean delete(String reviewId) {
        Review review = get(reviewId);
        if (review != null) {
            mapper.delete(review);
            return true;
        }
        return false;
    }
}
