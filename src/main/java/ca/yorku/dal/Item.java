package ca.yorku.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ReturnConsumedCapacity;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.serverless.dal.DynamoDBAdapter;
import lombok.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

@DynamoDBTable(tableName = "item_table6")
public class Item {

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    private String id;
    @DynamoDBAttribute
    private double price;
    @DynamoDBRangeKey
    private String name;
    @DynamoDBAttribute
    private long quantity;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "CategoryIndex")
    private String category;
    @DynamoDBAttribute
    private String soldBy;
    @DynamoDBAttribute
    private int numSold;
    @DynamoDBAttribute
    private List<ReviewId> reviews;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getQuantity() {
        return quantity;
    }

    public void setQuantity(long quantity) {
        this.quantity = quantity;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getSoldBy() {
        return soldBy;
    }

    public void setSoldBy(String soldBy) {
        this.soldBy = soldBy;
    }

    public int getNumSold() {
        return numSold;
    }

    public void setNumSold(int numSold) {
        this.numSold = numSold;
    }

    public List<ReviewId> getReviews() {
        return reviews;
    }

    public void setReviews(List<ReviewId> reviews) {
        this.reviews = reviews;
    }

    private Logger logger = Logger.getLogger(this.getClass().getName());

    public Item() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .build();
        // get the db adapter
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = db_adapter.createDbMapper(mapperConfig);
    }

    public Item get(String id) {
        Item item = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Item> queryExp = new DynamoDBQueryExpression<Item>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Item> result = this.mapper.query(Item.class, queryExp);
        if (result.size() > 0) {
            item = result.get(0);
            //logger.info("Products - get(): product - " + product.toString());
        } else {
            //logger.info("Products - get(): product - Not Found.");
        }
        return item;
    }

    @DynamoDBIgnore
    public List<Item> getByCategory(String categoryId) {
        List<Item> itemList = new ArrayList<Item>();

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(categoryId));

        DynamoDBQueryExpression<Item> queryExp = new DynamoDBQueryExpression<Item>()
                .withIndexName("CategoryIndex")
                .withConsistentRead(false)
                .withKeyConditionExpression("category = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Item> result = this.mapper.query(Item.class, queryExp);
        if (result.size() > 0) {
            itemList.addAll(result);
        } else {
            logger.info("Products - get(): product - Not Found.");
        }
        return itemList;
    }

    @DynamoDBIgnore
    public List<TopItemInfo> topItems(){
        ScanRequest scanReq = new ScanRequest()
                .withTableName("item_table6")
                //.withLimit(5)
                .withAttributesToGet(new String[]{"id","numSold"})
                .withReturnConsumedCapacity(ReturnConsumedCapacity.TOTAL);
        ScanResult result = client.scan(scanReq);
        List<Map<String, AttributeValue>> itemList = result.getItems();
        List<TopItemInfo> topInfo = new ArrayList<>();
        for(Map<String, AttributeValue> i: itemList){
            TopItemInfo ti = new TopItemInfo();
            ti.setItemId(i.get("id").getS());
            ti.setNumSold(Integer.parseInt(i.get("numSold").getN()));
            topInfo.add(ti);
        }
        return topInfo;
    }

    public void save() {
        mapper.save(this);
    }

    @DynamoDBIgnore
    public boolean delete(String id) {
        Item item;
        item = get(id);
        if (item != null) {
            mapper.delete(item);
            return true;
        }
        return false;
    }

    @DynamoDBDocument
    public static class ReviewId {
        private String reviewId;

        @DynamoDBAttribute(attributeName = "id")
        public String getReviewId() {
            return reviewId;
        }

        public void setReviewId(String reviewId) {
            this.reviewId = reviewId;
        }
    }

    public static class TopItemInfo{

        public String getItemId() {
            return itemId;
        }

        public void setItemId(String itemId) {
            this.itemId = itemId;
        }

        private String itemId;

        public int getNumSold() {
            return numSold;
        }

        public void setNumSold(int numSold) {
            this.numSold = numSold;
        }

        private int numSold;

    }
}
