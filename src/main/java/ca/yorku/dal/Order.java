package ca.yorku.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.serverless.dal.DynamoDBAdapter;
import lombok.*;

import java.util.*;
import java.util.logging.Logger;

@DynamoDBTable(tableName = "orders_table3")
public class Order {

    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    private final Logger logger;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    @Getter
    @Setter
    private String id;
    @DynamoDBAttribute
    @Getter
    @Setter
    private Date placedDate;
    @DynamoDBAttribute
    @Getter
    @Setter
    private Date shippedDate;
    @DynamoDBAttribute
    @Getter
    @Setter
    private Date deliveredDate;
    @DynamoDBAttribute
    @DynamoDBTypeConvertedEnum
    @Getter
    @Setter
    private Status status;
    @DynamoDBAttribute
    @Getter
    @Setter
    private String comment;
    @DynamoDBAttribute
    @Getter
    @Setter
    private String itemId;

    public Order() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder().build();
        DynamoDBAdapter db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getDbClient();
        this.mapper = db_adapter.createDbMapper(mapperConfig);

        logger = Logger.getLogger(this.getClass().getName());
    }

    public Order get(String id) {
        Order order = null;

        Map<String, AttributeValue> av = new HashMap<>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Order> queryExp = new DynamoDBQueryExpression<Order>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        List<Order> result = this.mapper.query(Order.class, queryExp);
        if (result.size() > 0) {
            order = result.get(0);
            //logger.info("Products - get(): product - " + product.toString());
        } else {
            //logger.info("Products - get(): product - Not Found.");
        }
        return order;
    }

    public List<Order> getByItem(String itemId) {
        List<Order> orderList = new ArrayList<>();

        Map<String, AttributeValue> av = new HashMap<>();
        av.put(":v1", new AttributeValue().withS(itemId));

        DynamoDBQueryExpression<Order> queryExp = new DynamoDBQueryExpression<Order>()
                .withIndexName("ItemsIndex")
                .withConsistentRead(false)
                .withKeyConditionExpression("itemId = :v1")
                .withExpressionAttributeValues(av);

        List<Order> result = this.mapper.query(Order.class, queryExp);
        if (result.size() > 0) {
            orderList.addAll(result);
        } else {
            logger.info("Orders - get(): order - Not Found.");
        }
        return orderList;
    }

    public void save() {
        mapper.save(this);
    }

    public boolean delete(String id) {
        Order order = get(id);
        if (order != null) {
            mapper.delete(order);
            return true;
        }
        return false;
    }

    public enum Status {
        Placed,
        Shipped,
        Delivered
    }
}
